{"fileData":[{"jsonIndex":"0","boilerIndex":0,"filePath":"/","name":"JsExtension.js","data":"/**\n * This is a declaration of an extension for GDevelop 5.\n *\n * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change\n * to this extension file or to any other *.js file that you reference inside.\n *\n * The file must be named \"JsExtension.js\", otherwise GDevelop won't load it.\n * ⚠️ If you make a change and the extension is not loaded, open the developer console\n * and search for any errors.\n *\n * More information on https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md\n */\n\nmodule.exports = {\n  createExtension: function(_, gd) {\n    const extension = new gd.PlatformExtension()\n    extension\n      .setExtensionInformation(\n        'TileMap',\n        _('TileMap Object'),\n        _('Displays a tiled tilemap.'),\n        'Todor Imreorov',\n        'Open source (MIT License)'\n      )\n      .setExtensionHelpPath('/objects/tile map')\n\n    var objectTileMap = new gd.ObjectJsImplementation()\n    objectTileMap.updateProperty = function(\n      objectContent,\n      propertyName,\n      newValue\n    ) {\n      if (propertyName in objectContent) {\n        if (typeof objectContent[propertyName] === 'boolean')\n          objectContent[propertyName] = newValue === '1'\n        else objectContent[propertyName] = newValue\n        return true\n      }\n\n      return false\n    }\n    objectTileMap.getProperties = function(objectContent) {\n      var objectProperties = new gd.MapStringPropertyDescriptor()\n\n      objectProperties.set(\n        'bbcode text',\n        new gd.PropertyDescriptor(objectContent.bbcodeText)\n          .setType('textarea')\n          .setLabel(_('Bbcode text'))\n      )\n      objectProperties.set(\n        'word wrap',\n        new gd.PropertyDescriptor(objectContent.wordWrap ? 'true' : 'false')\n          .setType('boolean')\n          .setLabel(_('Word wrap'))\n      )\n      objectProperties.set(\n        'opacity',\n        new gd.PropertyDescriptor(objectContent.opacity.toString())\n          .setType('number')\n          .setLabel(_('Opacity'))\n      )\n      objectProperties.set(\n        'base color',\n        new gd.PropertyDescriptor(objectContent.baseColor)\n          .setType('color')\n          .setLabel(_('Base color'))\n      )\n      objectProperties.set(\n        'base font family',\n        new gd.PropertyDescriptor(objectContent.baseFontFamily)\n          .setType('resource')\n          .addExtraInfo('font')\n          .setLabel(_('Base font family'))\n      )\n      objectProperties.set(\n        'base pic test',\n        new gd.PropertyDescriptor(objectContent.basePicTest)\n          .setType('resource')\n          .addExtraInfo('image')\n          .setLabel(_('Base pic test'))\n      )\n\n      return objectProperties\n    }\n    objectTileMap.setRawJSONContent(\n      JSON.stringify({\n        bbcodeText: 'my text value',\n        wordWrap: true,\n        opacity: 42,\n        baseColor: '#1ce1ff',\n        baseFontFamily: 'arial',\n        basePicTest: '??',\n        alignment: 'left',\n      })\n    )\n\n    objectTileMap.updateInitialInstanceProperty = function(\n      objectContent,\n      instance,\n      propertyName,\n      newValue,\n      project,\n      layout\n    ) {\n      return false\n    }\n    objectTileMap.getInitialInstanceProperties = function(\n      content,\n      instance,\n      project,\n      layout\n    ) {\n      var instanceProperties = new gd.MapStringPropertyDescriptor()\n      return instanceProperties\n    }\n\n    const object = extension\n      .addObject(\n        'TileMap',\n        _('TileMap'),\n        _('Displays a tiled tilemap'),\n        'JsPlatform/Extensions/bbcode32.png',\n        objectTileMap\n      )\n      .setIncludeFile('Extensions/TileMap/tile mapruntimeobject.js')\n      .addIncludeFile(\n        'Extensions/TileMap/tile mapruntimeobject-pixi-renderer.js'\n      )\n      .addIncludeFile('Extensions//tiled/tiledLib.js')\n\n    /**\n     * Utility function to add both a setter and a getter to a property from a list.\n     * Useful for setting multiple generic properties.\n     */\n    ///////////// TODO make reusable ///////////////////////////////////////////////////////////////////////////////////////\n    const addSettersAndGettersToObject = (gdObject, properties, objectName) => {\n      properties.forEach(property => {\n        const parameterType =\n          property.type === 'boolean' ? 'yesorno' : property.type\n\n        // Add the expression\n        if (parameterType === 'number') {\n          gdObject\n            .addExpression(\n              `Get${property.functionName}`,\n              property.expressionLabel,\n              property.expressionDescription,\n              '',\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .getCodeExtraInformation()\n            .setFunctionName(`get${property.functionName}`)\n        } else if (parameterType === 'string') {\n          gdObject\n            .addStrExpression(\n              `Get${property.functionName}`,\n              property.expressionLabel,\n              property.expressionDescription,\n              '',\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .getCodeExtraInformation()\n            .setFunctionName(`get${property.functionName}`)\n        }\n\n        // Add the action\n        if (parameterType === 'number' || parameterType === 'string') {\n          const expressionType =\n            parameterType === 'number' ? 'expression' : 'string'\n          gdObject\n            .addAction(\n              `Set${property.functionName}`,\n              property.paramLabel,\n              property.actionDescription,\n              property.actionSentence,\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .useStandardOperatorParameters(parameterType)\n            .getCodeExtraInformation()\n            .setFunctionName(`set${property.functionName}`)\n            .setGetter(`get${property.functionName}`)\n        } else {\n          gdObject\n            .addAction(\n              `Set${property.functionName}`,\n              property.paramLabel,\n              property.actionDescription,\n              property.actionSentence,\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .addParameter(\n              parameterType,\n              property.paramLabel,\n              property.options\n                ? '[\"' + property.options.join('\", \"') + '\"]'\n                : '',\n              false\n            )\n            .getCodeExtraInformation()\n            .setFunctionName(`set${property.functionName}`)\n            .setGetter(`get${property.functionName}`)\n        }\n\n        // Add condition\n        if (parameterType === 'string' || parameterType === 'number') {\n          const propExpressionType =\n            parameterType === 'string' ? 'string' : 'expression'\n          gdObject\n            .addCondition(\n              `Is${property.functionName}`,\n              property.paramLabel,\n              property.conditionDescription,\n              property.conditionSentence,\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .useStandardRelationalOperatorParameters(parameterType)\n            .getCodeExtraInformation()\n            .setFunctionName(`get${property.functionName}`)\n        } else if (parameterType === 'yesorno') {\n          gdObject\n            .addCondition(\n              `Is${property.functionName}`,\n              property.paramLabel,\n              property.conditionDescription,\n              property.conditionSentence,\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .getCodeExtraInformation()\n            .setFunctionName(`get${property.functionName}`)\n        }\n      })\n    }\n    ////////////// TODO move out of here /////////////////////////////////////////\n    const setterAndGetterProperties = [\n      {\n        functionName: 'BbcodeText',\n        iconPath: 'res/actions/YAY.png',\n        type: 'string',\n        paramLabel: _('Bbcode text'),\n        actionDescription: _('Actdes'),\n        actionSentence: _('actsen...'),\n        conditionSentence: _('consent'),\n        conditionDescription: _('Comp the value of so and so'),\n        expressionLabel: _('Exp label'),\n        expressionDescription: _('Exp des'),\n      },\n      {\n        functionName: 'WordWrap',\n        iconPath: 'JsPlatform/Extensions/e.png',\n        type: 'boolean',\n        paramLabel: _('Word wrap'),\n        actionDescription: _('Set Word wrap'),\n        actionSentence: _('Activate word wrap for _PARAM0_: _PARAM1_'),\n        conditionSentence: _('Word wrap is enabled'),\n        conditionDescription: _('Compare the value of the word wrap.'),\n        expressionLabel: _('Get the Word wrap'),\n        expressionDescription: _('Get the Word wrap'),\n      },\n      {\n        functionName: 'Opacity',\n        iconPath: 'JsPlatform/Extensions/e.png',\n        type: 'number',\n        paramLabel: _('Opacity'),\n        actionDescription: _('Set Opacity'),\n        actionSentence: _('Do _PARAM1__PARAM2_ to the opacity of _PARAM0_'),\n        conditionSentence: _('The opacity of _PARAM0_ is _PARAM1__PARAM2_'),\n        conditionDescription: _('Compare the value of the opacity.'),\n        expressionLabel: _('Get the Opacity'),\n        expressionDescription: _('Get the Opacity'),\n      },\n      {\n        functionName: 'BaseColor',\n        iconPath: 'JsPlatform/Extensions/e.png',\n        type: 'color',\n        paramLabel: _('Base color'),\n        actionDescription: _('Set Base color'),\n        actionSentence: _('Set the base color of _PARAM0_ to _PARAM1_'),\n        conditionDescription: '', // No conditions for a \"color\" property\n        conditionSentence: '', // No conditions for a \"color\" property\n        expressionLabel: '', // No expression for a \"color\" property\n        expressionDescription: '', // No expression for a \"color\" property\n      },\n      {\n        functionName: 'BaseFontFamily',\n        iconPath: 'JsPlatform/Extensions/e.png',\n        type: 'font',\n        paramLabel: _('Base font family'),\n        actionDescription: _('Set Base font family'),\n        actionSentence: _(\n          'Do _PARAM1__PARAM2_ to the base font family of _PARAM0_'\n        ),\n        conditionSentence: _(\n          'The base font family of _PARAM0_ is _PARAM1__PARAM2_'\n        ),\n        conditionDescription: _('Compare the value of the base font family.'),\n        expressionLabel: _('Get the Base font family'),\n        expressionDescription: _('Get the Base font family'),\n      },\n      {\n        functionName: 'BasePicTest',\n        iconPath: 'JsPlatform/Extensions/e.png',\n        type: 'image',\n        paramLabel: _('Base pic test'),\n        actionDescription: _('Set Base pic test'),\n        actionSentence: _(\n          'Do _PARAM1__PARAM2_ to the base pic test of _PARAM0_'\n        ),\n        conditionSentence: _(\n          'The base pic test of _PARAM0_ is _PARAM1__PARAM2_'\n        ),\n        conditionDescription: _('Compare the value of the base pic test.'),\n        expressionLabel: _('Get the Base pic test'),\n        expressionDescription: _('Get the Base pic test'),\n      },\n      {\n        functionName: 'Alignment',\n        iconPath: 'JsPlatform/Extensions/e.png',\n        type: 'stringWithSelector',\n        paramLabel: _('Alignment'),\n        options: ['left', 'center', 'right'],\n        actionDescription: _('Set Alignment'),\n        actionSentence: _('Set the alignment of _PARAM0_ to _PARAM1_'),\n        conditionSentence: _('The alignment of _PARAM0_ is _PARAM1_'),\n      },\n    ]\n\n    addSettersAndGettersToObject(object, setterAndGetterProperties, 'TileMap')\n\n    return extension\n  },\n\n  /**\n   * You can optionally add sanity tests that will check the basic working\n   * of your extension behaviors/objects by instanciating behaviors/objects\n   * and setting the property to a given value.\n   *\n   * If you don't have any tests, you can simply return an empty array like this:\n   * `runExtensionSanityTests: function(gd, extension) { return []; }`\n   *\n   * But it is recommended to create tests for the behaviors/objects properties you created\n   * to avoid mistakes.\n   */\n  runExtensionSanityTests: function(gd, extension) {\n    return []\n  },\n  /**\n   * Register editors for objects.\n   *\n   * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change.\n   */\n  registerEditorConfigurations: function(objectsEditorService) {\n    objectsEditorService.registerEditorConfiguration(\n      'TileMap::TileMap',\n      objectsEditorService.getDefaultObjectJsImplementationPropertiesEditor({\n        helpPagePath: '/objects/tile_map_object',\n      })\n    )\n  },\n  /**\n   * Register renderers for instance of objects on the scene editor.\n   *\n   * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change.\n   */\n  registerInstanceRenderers: function(objectsRenderingService) {\n    const RenderedInstance = objectsRenderingService.RenderedInstance\n    const PIXI = objectsRenderingService.PIXI\n\n    const ImportedExtLib = objectsRenderingService.requireModule(\n      __dirname,\n      'tiled/tiledLib'\n    )\n\n    /**\n     * Renderer for instances of TileMap inside the IDE.\n     *\n     * @extends RenderedTileMapInstance\n     * @class RenderedTileMapInstance\n     * @constructor\n     */\n    function RenderedTileMapInstance(\n      project,\n      layout,\n      instance,\n      associatedObject,\n      pixiContainer,\n      pixiResourcesLoader\n    ) {\n      RenderedInstance.call(\n        this,\n        project,\n        layout,\n        instance,\n        associatedObject,\n        pixiContainer,\n        pixiResourcesLoader\n      )\n\n      const libOptions = {\n        default: {\n          fontFamily: 'Arial',\n          fontSize: '24px',\n          fill: '#cccccc',\n          tagStyle: 'bbcode',\n          wordWrap: true,\n          wordWrapWidth: 250, // This value is the default wrapping width of the runtime object.\n          align: 'left',\n        },\n      }\n\n      this._pixiObject = new ImportedExtLib('', libOptions)\n\n      this._pixiObject.anchor.x = 0.5\n      this._pixiObject.anchor.y = 0.5\n      this._pixiContainer.addChild(this._pixiObject)\n      this.update()\n    }\n    RenderedTileMapInstance.prototype = Object.create(\n      RenderedInstance.prototype\n    )\n\n    /**\n     * Return the path to the thumbnail of the specified object.\n     */\n    RenderedTileMapInstance.getThumbnail = function(\n      project,\n      resourcesLoader,\n      object\n    ) {\n      return 'JsPlatform/Extensions/e.png'\n    }\n\n    /**\n     * This is called to update the PIXI object on the scene editor\n     */\n    RenderedTileMapInstance.prototype.update = function() {\n      const bbcodeText = this._associatedObject\n        .getProperties(this.project)\n        .get('bbcodeText')\n        .getValue()\n      this._pixiObject.bbcodeText = bbcodeText\n      const wordWrap = this._associatedObject\n        .getProperties(this.project)\n        .get('wordWrap')\n        .getValue()\n      if (wordWrap !== this._pixiObject._wordWrap) {\n        this._pixiObject._wordWrap = wordWrap === 'true'\n        this._pixiObject.dirty = true\n      }\n      const opacity = this._associatedObject\n        .getProperties(this.project)\n        .get('opacity')\n        .getValue()\n      this._pixiObject.opacity = opacity\n      const baseColor = this._associatedObject\n        .getProperties(this.project)\n        .get('baseColor')\n        .getValue()\n      this._pixiObject.baseColor = baseColor\n      const baseFontFamily = this._associatedObject\n        .getProperties(this.project)\n        .get('baseFontFamily')\n        .getValue()\n      this._pixiObject.baseFontFamily = baseFontFamily\n      const basePicTest = this._associatedObject\n        .getProperties(this.project)\n        .get('basePicTest')\n        .getValue()\n      this._pixiObject.basePicTest = basePicTest\n      const alignment = this._associatedObject\n        .getProperties(this.project)\n        .get('alignment')\n        .getValue()\n      this._pixiObject.alignment = alignment\n\n      this._pixiObject.position.x =\n        this._instance.getX() + this._pixiObject.width / 2\n      this._pixiObject.position.y =\n        this._instance.getY() + this._pixiObject.height / 2\n      this._pixiObject.rotation = RenderedInstance.toRad(\n        this._instance.getAngle()\n      )\n\n      if (this._instance.hasCustomSize() && this._pixiObject) {\n        const customWidth = this._instance.getCustomWidth()\n        if (\n          this._pixiObject &&\n          this._pixiObject.textStyles.default.wordWrapWidth !== customWidth\n        ) {\n          this._pixiObject._style.wordWrapWidth = customWidth\n          this._pixiObject.dirty = true\n        }\n      }\n    }\n\n    /**\n     * Return the width of the instance, when it's not resized.\n     */\n    RenderedTileMapInstance.prototype.getDefaultWidth = function() {\n      return this._pixiObject.width\n    }\n\n    /**\n     * Return the height of the instance, when it's not resized.\n     */\n    RenderedTileMapInstance.prototype.getDefaultHeight = function() {\n      return this._pixiObject.height\n    }\n\n    objectsRenderingService.registerInstanceRenderer(\n      'TileMap::TileMap',\n      RenderedTileMapInstance\n    )\n  },\n}\n","enabled":true,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/JsExtension.js"},{"jsonIndex":0,"boilerIndex":2,"filePath":"/","name":"{{0.extensionName}}runtimeobject.js","data":"","enabled":true,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/tile mapruntimeobject.js"},{"jsonIndex":"0","boilerIndex":1,"filePath":"/","name":"{{0.extensionName}}runtimeobject-pixi-renderer.js","data":"/**\n * The PIXI.js renderer for the Tile map runtime object.\n *\n * @class TileMapRuntimeObjectPixiRenderer\n * @constructor\n * @param {gdjs.TileMapRuntimeObject} runtimeObject The object to render\n * @param {gdjs.RuntimeScene} runtimeScene The gdjs.RuntimeScene in which the object is\n */\ngdjs.TileMapRuntimeObjectPixiRenderer = function(runtimeObject, runtimeScene) {\n  this._object = runtimeObject\n\n  // Load (or reset) the text\n  if (this._pixiObject === undefined) {\n    this._pixiObject = new MultiStyleText(runtimeObject._text, {\n      default: {\n        fontFamily: runtimeObject._fontFamily,\n        fontSize: runtimeObject._fontSize + 'px',\n        fill: runtimeObject._color,\n        tagStyle: 'bbcode',\n        wordWrap: runtimeObject._wordWrap,\n        wordWrapWidth: runtimeObject._wrappingWidth,\n        align: runtimeObject._align,\n      },\n    })\n\n    this._object.hidden = !runtimeObject._visible\n  } else {\n    this.updateColor()\n    this.updateAlignment()\n    this.updateFontFamily()\n    this.updateFontSize()\n  }\n\n  runtimeScene\n    .getLayer('')\n    .getRenderer()\n    .addRendererObject(this._pixiObject, runtimeObject.getZOrder())\n\n  // Set the anchor in the center, so that the object rotates around\n  // its center\n  this._pixiObject.anchor.x = 0.5\n  this._pixiObject.anchor.y = 0.5\n\n  this.updatePosition()\n  this.updateAngle()\n  this.updateOpacity()\n  this.updateVisible()\n}\n\ngdjs.TileMapRuntimeObjectRenderer = gdjs.TileMapRuntimeObjectPixiRenderer\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.getRendererObject = function() {\n  return this._pixiObject\n}\n\ngdjs.RuntimeObjectPixiRenderer.prototype.updateBbcodeText = function() {\n  this._pixiObject._style.bbcodeText = this._object._bbcodeText\n  //this._pixiObject.dirty = true;\n  this.updatePosition()\n}\ngdjs.RuntimeObjectPixiRenderer.prototype.updateWordWrap = function() {\n  this._pixiObject._style.wordWrap = this._object._wordWrap\n  //this._pixiObject.dirty = true;\n  this.updatePosition()\n}\ngdjs.RuntimeObjectPixiRenderer.prototype.updateOpacity = function() {\n  this._pixiObject._style.opacity = this._object._opacity\n  //this._pixiObject.dirty = true;\n  this.updatePosition()\n}\ngdjs.RuntimeObjectPixiRenderer.prototype.updateBaseColor = function() {\n  this._pixiObject._style.baseColor = this._object._baseColor\n  //this._pixiObject.dirty = true;\n  this.updatePosition()\n}\ngdjs.RuntimeObjectPixiRenderer.prototype.updateBaseFontFamily = function() {\n  this._pixiObject._style.baseFontFamily = this._object._baseFontFamily\n  //this._pixiObject.dirty = true;\n  this.updatePosition()\n}\ngdjs.RuntimeObjectPixiRenderer.prototype.updateBasePicTest = function() {\n  this._pixiObject._style.basePicTest = this._object._basePicTest\n  //this._pixiObject.dirty = true;\n  this.updatePosition()\n}\ngdjs.RuntimeObjectPixiRenderer.prototype.updateAlignment = function() {\n  this._pixiObject._style.alignment = this._object._alignment\n  //this._pixiObject.dirty = true;\n  this.updatePosition()\n}\n\ngdjs.BBTextRuntimeObjectPixiRenderer.prototype.updatePosition = function() {\n  this._pixiObject.position.x = this._object.x + this._pixiObject.width / 2\n  this._pixiObject.position.y = this._object.y + this._pixiObject.height / 2\n}\n\ngdjs.BBTextRuntimeObjectPixiRenderer.prototype.updateVisible = function() {\n  this._pixiObject.hidden = !this._object._visible\n}\n\ngdjs.BBTextRuntimeObjectPixiRenderer.prototype.updateAngle = function() {\n  this._pixiObject.rotation = gdjs.toRad(this._object.angle)\n}\n\ngdjs.BBTextRuntimeObjectPixiRenderer.prototype.updateOpacity = function() {\n  this._pixiObject.alpha = this._object._opacity / 255\n}\n\ngdjs.BBTextRuntimeObjectPixiRenderer.prototype.getWidth = function() {\n  return this._pixiObject.width\n}\n\ngdjs.BBTextRuntimeObjectPixiRenderer.prototype.getHeight = function() {\n  return this._pixiObject.height\n}\n","enabled":true,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/tile mapruntimeobject-pixi-renderer.js"}],"codeData":[{"id":0,"name":"extensionBoiler","data":"/**\n * This is a declaration of an extension for GDevelop 5.\n *\n * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change\n * to this extension file or to any other *.js file that you reference inside.\n *\n * The file must be named \"JsExtension.js\", otherwise GDevelop won't load it.\n * ⚠️ If you make a change and the extension is not loaded, open the developer console\n * and search for any errors.\n *\n * More information on https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md\n */\n\nmodule.exports = {\n  createExtension: function(_, gd) {\n    const extension = new gd.PlatformExtension();\n    extension\n      .setExtensionInformation(\n        '{{pascalcase extensionName}}',\n        _('{{pascalcase extensionName}} Object'),\n        _(\n          '{{extensionDesc}}.'\n        ),\n        'Todor Imreorov',\n        'Open source (MIT License)'\n      )\n      .setExtensionHelpPath('/objects/{{extensionName}}');\n\n    var object{{pascalcase extensionName}} = new gd.ObjectJsImplementation();\n    object{{pascalcase extensionName}}.updateProperty = function(\n      objectContent,\n      propertyName,\n      newValue\n    ) {\n      if (propertyName in objectContent) {\n        if (typeof objectContent[propertyName] === 'boolean')\n          objectContent[propertyName] = newValue === '1';\n        else objectContent[propertyName] = newValue;\n        return true;\n      }\n\n      return false;\n    };\n    object{{pascalcase extensionName}}.getProperties = function(objectContent) {\n      var objectProperties = new gd.MapStringPropertyDescriptor();\n\n    {{#each ObjectProperties}}\n      {{#startsWith \"text\" gdType}}\n       objectProperties.set(\n              '{{var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('{{gdType}}')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"boolean\" gdType}}\n       objectProperties.set(\n              '{{var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}} ? 'true' : 'false')\n                .setType('{{gdType}}')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"number\" gdType}}\n       objectProperties.set(\n              '{{var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}}.toString())\n                .setType('{{gdType}}')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"color\" gdType}}\n       objectProperties.set(\n              '{{var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('{{gdType}}')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"font\" gdType}}\n       objectProperties.set(\n              '{{var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('resource')\n                .addExtraInfo('{{gdType}}')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"image\" gdType}}\n       objectProperties.set(\n              '{{var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('resource')\n                .addExtraInfo('{{gdType}}')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"choice\" gdType}}\n       objectProperties.set(\n              '{{var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('{{gdType}}')\n                {{#each this.choices}}\n                .addExtraInfo('{{this}}')\n                {{/each}}\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n    {{/each}}\n\n      return objectProperties;\n    };\n    object{{pascalcase extensionName}}.setRawJSONContent(\n      JSON.stringify({\n    {{#each ObjectProperties}}\n      {{#startsWith (typeOf this.val) \"string\"}}\n        {{camelcase var}}: \"{{val}}\",\n      {{else}}\n        {{camelcase var}}: {{val}},\n      {{/startsWith}}\n    {{/each}}\n      })\n    );\n\n    object{{pascalcase extensionName}}.updateInitialInstanceProperty = function(\n      objectContent,\n      instance,\n      propertyName,\n      newValue,\n      project,\n      layout\n    ) {\n      return false;\n    };\n    object{{pascalcase extensionName}}.getInitialInstanceProperties = function(\n      content,\n      instance,\n      project,\n      layout\n    ) {\n      var instanceProperties = new gd.MapStringPropertyDescriptor();\n      return instanceProperties;\n    };\n\n    const object = extension\n      .addObject(\n        '{{pascalcase extensionName}}',\n        _('{{pascalcase extensionName}}'),\n        _(\n          '{{extensionDesc}}'\n        ),\n        'JsPlatform/Extensions/bbcode32.png',\n        object{{pascalcase extensionName}}\n      )\n      .setIncludeFile('Extensions/{{pascalcase extensionName}}/{{extensionName}}runtimeobject.js')\n      .addIncludeFile('Extensions/{{pascalcase extensionName}}/{{extensionName}}runtimeobject-pixi-renderer.js')\n      {{#each includeFiles}}\n       .addIncludeFile(\n        'Extensions/{{pascalcase extensionName}}/{{this}}'\n      );\n      {{/each}}\n\n    /**\n     * Utility function to add both a setter and a getter to a property from a list.\n     * Useful for setting multiple generic properties.\n     */\n    ///////////// TODO make reusable ///////////////////////////////////////////////////////////////////////////////////////\n    const addSettersAndGettersToObject = (gdObject, properties, objectName) => {\n      properties.forEach(property => {\n        const parameterType =\n          property.type === 'boolean' ? 'yesorno' : property.type;\n\n        // Add the expression\n        if (parameterType === 'number') {\n          gdObject\n            .addExpression(\n              `Get${property.functionName}`,\n              property.expressionLabel,\n              property.expressionDescription,\n              '',\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .getCodeExtraInformation()\n            .setFunctionName(`get${property.functionName}`);\n        } else if (parameterType === 'string') {\n          gdObject\n            .addStrExpression(\n              `Get${property.functionName}`,\n              property.expressionLabel,\n              property.expressionDescription,\n              '',\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .getCodeExtraInformation()\n            .setFunctionName(`get${property.functionName}`);\n        }\n\n        // Add the action\n        if (parameterType === 'number' || parameterType === 'string') {\n          const expressionType =\n            parameterType === 'number' ? 'expression' : 'string';\n          gdObject\n            .addAction(\n              `Set${property.functionName}`,\n              property.paramLabel,\n              property.actionDescription,\n              property.actionSentence,\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .useStandardOperatorParameters(parameterType)\n            .getCodeExtraInformation()\n            .setFunctionName(`set${property.functionName}`)\n            .setGetter(`get${property.functionName}`);\n        } else {\n          gdObject\n            .addAction(\n              `Set${property.functionName}`,\n              property.paramLabel,\n              property.actionDescription,\n              property.actionSentence,\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .addParameter(\n              parameterType,\n              property.paramLabel,\n              property.options\n                ? '[\"' + property.options.join('\", \"') + '\"]'\n                : '',\n              false\n            )\n            .getCodeExtraInformation()\n            .setFunctionName(`set${property.functionName}`)\n            .setGetter(`get${property.functionName}`);\n        }\n\n        // Add condition\n        if (parameterType === 'string' || parameterType === 'number') {\n          const propExpressionType =\n            parameterType === 'string' ? 'string' : 'expression';\n          gdObject\n            .addCondition(\n              `Is${property.functionName}`,\n              property.paramLabel,\n              property.conditionDescription,\n              property.conditionSentence,\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .useStandardRelationalOperatorParameters(parameterType)\n            .getCodeExtraInformation()\n            .setFunctionName(`get${property.functionName}`);\n        } else if (parameterType === 'yesorno') {\n          gdObject\n            .addCondition(\n              `Is${property.functionName}`,\n              property.paramLabel,\n              property.conditionDescription,\n              property.conditionSentence,\n              '',\n              property.iconPath,\n              property.iconPath\n            )\n            .addParameter('object', objectName, objectName, false)\n            .getCodeExtraInformation()\n            .setFunctionName(`get${property.functionName}`);\n        }\n      });\n    };\n    ////////////// TODO move out of here /////////////////////////////////////////\n\n    const setterAndGetterProperties = [\n    {{#each ObjectProperties}}\n     {\n      functionName: '{{pascalcase var}}',\n      iconPath: '{{#if icon}}{{icon}}{{else}}{{../objectIconPath}}{{/if}}',\n      type: '{{#startsWith \"text\" gdType}}string{{else}}{{gdType}}{{/startsWith}}',\n      paramLabel: _('{{capitalize var}}'),\n      {{#if choices}}\n      options: [{{#each choices}} \"{{this}}\",{{/each}}],\n      {{/if}}\n      actionDescription: _('{{#if actDes}}{{capitalize actDes}}{{else}}Set {{capitalize var}}{{/if}}'),\n      {{#startsWith \"color\" gdType}}\n      actionSentence: _('{{#if actSen}}{{actSen}}{{else}}Set the {{var}} of _PARAM0_ to _PARAM1_{{/if}}'),\n      conditionDescription: '', // No conditions for a \"color\" property\n      conditionSentence: '', // No conditions for a \"color\" property\n      expressionLabel: '', // No expression for a \"color\" property\n      expressionDescription: '', // No expression for a \"color\" property\n      {{else}}\n      {{#startsWith \"stringWithSelector\" gdType}}\n      actionSentence: _('{{#if actSen}}{{actSen}}{{else}}Set the {{var}} of _PARAM0_ to _PARAM1_{{/if}}'),\n      conditionSentence: _('{{#if conSen}}{{conSen}}{{else}}The {{var}} of _PARAM0_ is _PARAM1_{{/if}}'),\n      {{else}}\n      {{#startsWith \"boolean\" gdType}}\n      actionSentence: _('{{#if actSen}}{{actSen}}{{else}}Activate {{var}} for _PARAM0_: _PARAM1_{{/if}}'),\n      conditionSentence: _('{{#if conSen}}{{conSen}}{{else}}{{capitalize var}} is enabled{{/if}}'),\n      {{else}}\n      actionSentence: _('{{#if actSen}}{{actSen}}{{else}}Do _PARAM1__PARAM2_ to the {{var}} of _PARAM0_{{/if}}'),\n      conditionSentence: _('{{#if conSen}}{{conSen}}{{else}}The {{var}} of _PARAM0_ is _PARAM1__PARAM2_{{/if}}'),\n      {{/startsWith}}\n      conditionDescription: _('{{#if conDes}}{{capitalize conDes}}{{else}}Compare the value of the {{var}}.{{/if}}'),\n      expressionLabel: _('{{#if expLabel}}{{capitalize expLabel}}{{else}}Get the {{capitalize var}}{{/if}}'),\n      expressionDescription: _('{{#if expDes}}{{capitalize expDes}}{{else}}Get the {{capitalize var}}{{/if}}'),\n      {{/startsWith}}\n      {{/startsWith}}\n     },\n    {{/each}}\n    ];\n\n    addSettersAndGettersToObject(object, setterAndGetterProperties, '{{pascalcase extensionName}}');\n\n    return extension;\n  },\n\n  /**\n   * You can optionally add sanity tests that will check the basic working\n   * of your extension behaviors/objects by instanciating behaviors/objects\n   * and setting the property to a given value.\n   *\n   * If you don't have any tests, you can simply return an empty array like this:\n   * `runExtensionSanityTests: function(gd, extension) { return []; }`\n   *\n   * But it is recommended to create tests for the behaviors/objects properties you created\n   * to avoid mistakes.\n   */\n  runExtensionSanityTests: function(gd, extension) {\n    return [];\n  },\n  /**\n   * Register editors for objects.\n   *\n   * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change.\n   */\n  registerEditorConfigurations: function(objectsEditorService) {\n    objectsEditorService.registerEditorConfiguration(\n      '{{pascalcase extensionName}}::{{pascalcase extensionName}}',\n      objectsEditorService.getDefaultObjectJsImplementationPropertiesEditor({\n        helpPagePath: '/objects/{{snakecase extensionName}}_object',\n      })\n    );\n  },\n  /**\n   * Register renderers for instance of objects on the scene editor.\n   *\n   * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change.\n   */\n  registerInstanceRenderers: function(objectsRenderingService) {\n    const RenderedInstance = objectsRenderingService.RenderedInstance;\n    const PIXI = objectsRenderingService.PIXI;\n    \n    const ImportedExtLib = objectsRenderingService.requireModule(\n      __dirname,\n      '{{remove includeFiles.[0] \".js\"}}'\n    );\n\n    /**\n     * Renderer for instances of {{pascalcase extensionName}} inside the IDE.\n     *\n     * @extends Rendered{{pascalcase extensionName}}Instance\n     * @class Rendered{{pascalcase extensionName}}Instance\n     * @constructor\n     */\n    function Rendered{{pascalcase extensionName}}Instance(\n      project,\n      layout,\n      instance,\n      associatedObject,\n      pixiContainer,\n      pixiResourcesLoader\n    ) {\n      RenderedInstance.call(\n        this,\n        project,\n        layout,\n        instance,\n        associatedObject,\n        pixiContainer,\n        pixiResourcesLoader\n      );\n\n      const libOptions = {\n        default: {\n          fontFamily: 'Arial',\n          fontSize: '24px',\n          fill: '#cccccc',\n          tagStyle: 'bbcode',\n          wordWrap: true,\n          wordWrapWidth: 250, // This value is the default wrapping width of the runtime object.\n          align: 'left',\n        },\n      };\n\n      this._pixiObject = new ImportedExtLib('', libOptions);\n\n      this._pixiObject.anchor.x = 0.5;\n      this._pixiObject.anchor.y = 0.5;\n      this._pixiContainer.addChild(this._pixiObject);\n      this.update();\n    }\n    Rendered{{pascalcase extensionName}}Instance.prototype = Object.create(\n      RenderedInstance.prototype\n    );\n\n    /**\n     * Return the path to the thumbnail of the specified object.\n     */\n    Rendered{{pascalcase extensionName}}Instance.getThumbnail = function(\n      project,\n      resourcesLoader,\n      object\n    ) {\n      return '{{objectIconPath}}';\n    };\n\n    /**\n     * This is called to update the PIXI object on the scene editor\n     */\n    Rendered{{pascalcase extensionName}}Instance.prototype.update = function() {\n    \n    {{#each ObjectProperties}}\n       const {{camelcase var}} = this._associatedObject\n        .getProperties(this.project)\n        .get('{{camelcase var}}')\n        .getValue();\n        {{#startsWith \"boolean\" gdType}}\n        if ({{camelcase var}} !== this._pixiObject._{{camelcase var}}) {\n          this._pixiObject._{{camelcase var}} = {{camelcase var}} === 'true';\n          this._pixiObject.dirty = true;\n        }\n        {{else}}\n        this._pixiObject.{{camelcase var}} = {{camelcase var}};\n        {{/startsWith}}\n    {{/each}}\n\n      this._pixiObject.position.x =\n        this._instance.getX() + this._pixiObject.width / 2;\n      this._pixiObject.position.y =\n        this._instance.getY() + this._pixiObject.height / 2;\n      this._pixiObject.rotation = RenderedInstance.toRad(\n        this._instance.getAngle()\n      );\n\n      if (this._instance.hasCustomSize() && this._pixiObject) {\n        const customWidth = this._instance.getCustomWidth();\n        if (\n          this._pixiObject &&\n          this._pixiObject.textStyles.default.wordWrapWidth !== customWidth\n        ) {\n          this._pixiObject._style.wordWrapWidth = customWidth;\n          this._pixiObject.dirty = true;\n        }\n      }\n    };\n\n    /**\n     * Return the width of the instance, when it's not resized.\n     */\n    Rendered{{pascalcase extensionName}}Instance.prototype.getDefaultWidth = function() {\n      return this._pixiObject.width;\n    };\n\n    /**\n     * Return the height of the instance, when it's not resized.\n     */\n    Rendered{{pascalcase extensionName}}Instance.prototype.getDefaultHeight = function() {\n      return this._pixiObject.height;\n    };\n\n    objectsRenderingService.registerInstanceRenderer(\n      '{{pascalcase extensionName}}::{{pascalcase extensionName}}',\n      Rendered{{pascalcase extensionName}}Instance\n    );\n  },\n};\n"},{"id":1,"name":"pixi-render-Boiler","data":"/**\n * The PIXI.js renderer for the {{capitalize extensionName}} runtime object.\n *\n * @class {{pascalcase extensionName}}RuntimeObjectPixiRenderer\n * @constructor\n * @param {gdjs.{{pascalcase extensionName}}RuntimeObject} runtimeObject The object to render\n * @param {gdjs.RuntimeScene} runtimeScene The gdjs.RuntimeScene in which the object is\n */\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer = function(runtimeObject, runtimeScene) {\n  this._object = runtimeObject;\n\n  // Load (or reset) the text\n  if (this._pixiObject === undefined) {\n    this._pixiObject = new MultiStyleText(runtimeObject._text, {\n      default: {\n        fontFamily: runtimeObject._fontFamily,\n        fontSize: runtimeObject._fontSize + 'px',\n        fill: runtimeObject._color,\n        tagStyle: 'bbcode',\n        wordWrap: runtimeObject._wordWrap,\n        wordWrapWidth: runtimeObject._wrappingWidth,\n        align: runtimeObject._align,\n      },\n    });\n\n    this._object.hidden = !runtimeObject._visible;\n  } else {\n    this.updateColor();\n    this.updateAlignment();\n    this.updateFontFamily();\n    this.updateFontSize();\n  }\n\n  runtimeScene\n    .getLayer('')\n    .getRenderer()\n    .addRendererObject(this._pixiObject, runtimeObject.getZOrder());\n\n  // Set the anchor in the center, so that the object rotates around\n  // its center\n  this._pixiObject.anchor.x = 0.5;\n  this._pixiObject.anchor.y = 0.5;\n\n  this.updatePosition();\n  this.updateAngle();\n  this.updateOpacity();\n  this.updateVisible();\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectRenderer = gdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer;\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.getRendererObject = function() {\n  return this._pixiObject;\n};\n\n\n{{#each ObjectProperties}}\n gdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.update{{pascalcase var}} = function() {\n  this._pixiObject._style.{{camelcase var}} = this._object._{{camelcase var}};\n  //this._pixiObject.dirty = true;\n  this.updatePosition();\n};\n{{/each}}\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.updatePosition = function() {\n  this._pixiObject.position.x = this._object.x + this._pixiObject.width / 2;\n  this._pixiObject.position.y = this._object.y + this._pixiObject.height / 2;\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.updateVisible = function() {\n  this._pixiObject.hidden = !this._object._visible;\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.updateAngle = function() {\n  this._pixiObject.rotation = gdjs.toRad(this._object.angle);\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.updateOpacity = function() {\n  this._pixiObject.alpha = this._object._opacity / 255;\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.getWidth = function() {\n  return this._pixiObject.width;\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.getHeight = function() {\n  return this._pixiObject.height;\n};"},{"id":2,"name":"runtime-boiler","data":"/**\n * {{capitalize extensionDesc}}.\n * @memberof gdjs\n * @class {{pascalcase extensionName}}RuntimeObject\n * @extends RuntimeObject\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject = function(runtimeScene, objectData) {\n  gdjs.RuntimeObject.call(this, runtimeScene, objectData);\n\n  /** @type number */\n  this._opacity = objectData.content.opacity;\n  /** @type boolean */\n  this._visible = objectData.content.visible;\n{{#each ObjectProperties}}\n   /** @type {{#if (isString val)}}string{{else}}{{#startsWith \"bool\" gdType}}boolean{{else}}number{{/startsWith}}{{/if}} */\n  this._{{camelcase var}} = objectData.content.{{camelcase var}};\n{{/each}}\n  \n  if (this._renderer)\n    gdjs.{{pascalcase extensionName}}RuntimeObjectRenderer.call(this._renderer, this, runtimeScene);\n  else\n    this._renderer = new gdjs.{{pascalcase extensionName}}RuntimeObjectRenderer(this, runtimeScene);\n\n  // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n  this.onCreated();\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype = Object.create(\n  gdjs.RuntimeObject.prototype\n);\ngdjs.{{pascalcase extensionName}}RuntimeObject.thisIsARuntimeObjectConstructor = '{{pascalcase extensionName}}::{{pascalcase extensionName}}';\n\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.getRendererObject = function() {\n  return this._renderer.getRendererObject();\n};\n\n/**\n * Initialize the extra parameters that could be set for an instance.\n * @private\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.extraInitializationFromInitialInstance = function(\n  initialInstanceData\n) {\n  // The wrapping width value (this._wrappingWidth) is using the object's width as an innitial value\n  if (initialInstanceData.customSize)\n    this.setWrappingWidth(initialInstanceData.width);\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.onDestroyFromScene = function(runtimeScene) {\n  gdjs.RuntimeObject.prototype.onDestroyFromScene.call(this, runtimeScene);\n};\n\n/**\n * Set/Get {{pascalcase extensionName}} base properties\n */\n\n\n{{#each ObjectProperties}}\n gdjs.{{pascalcase extensionName}}RuntimeObject.prototype.set{{pascalcase var}} = function({{camelcase var}}) {\n  this._{{camelcase var}} = {{camelcase var}};\n  this._renderer.update{{pascalcase var}}();\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.get{{pascalcase var}} = function() {\n  return this._{{camelcase var}};\n};\n{{/each}}\n\n/**\n * Set object position on X axis.\n * @param {number} x The new position X of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.setX = function(x) {\n  gdjs.RuntimeObject.prototype.setX.call(this, x);\n  this._renderer.updatePosition();\n};\n\n/**\n * Set object position on Y axis.\n * @param {number} y The new position Y of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.setY = function(y) {\n  gdjs.RuntimeObject.prototype.setY.call(this, y);\n  this._renderer.updatePosition();\n};\n\n/**\n * Set the angle of the object.\n * @param {number} angle The new angle of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.setAngle = function(angle) {\n  gdjs.RuntimeObject.prototype.setAngle.call(this, angle);\n  this._renderer.updateAngle();\n};\n\n/**\n * Set object opacity.\n * @param {number} opacity The new opacity of the object (0-255).\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.setOpacity = function(opacity) {\n  this._opacity = opacity;\n  this._renderer.updateOpacity();\n};\n\n/**\n * Get object opacity.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.getOpacity = function() {\n  return this._opacity;\n};\n\n/**\n * Set the width.\n * @param {number} width The new width in pixels.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.setWrappingWidth = function(width) {\n  this._width = width;\n  this._renderer.updateWidth();\n};\n\n/**\n * Get the width of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.getWrappingWidth = function() {\n  return this._width;\n};\n\n\n/**\n * Get the width of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.getWidth = function() {\n  return this._renderer.getWidth();\n};\n\n/**\n * Get the height of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.getHeight = function() {\n  return this._renderer.getHeight();\n};"}],"jsonData":[{"id":0,"name":"extensionData","data":{"extensionName":"tile map","objectIconPath":"JsPlatform/Extensions/e.png","extensionDesc":"Displays a tiled tilemap","includeFiles":["tiled/tiledLib.js"],"ObjectProperties":[{"var":"bbcode text","val":"my text value","gdType":"textarea","icon":"res/actions/YAY.png","conDes":"Comp the value of so and so","conSen":"consent","actDes":"actdes","actSen":"actsen...","expLabel":"exp label","expDes":"exp des"},{"var":"word wrap","val":true,"gdType":"boolean"},{"var":"opacity","val":42,"gdType":"number"},{"var":"base color","val":"#1ce1ff","gdType":"color"},{"var":"base font family","val":"arial","gdType":"font"},{"val":"??","var":"base pic test","gdType":"image"},{"var":"alignment","val":"left","gdType":"stringWithSelector","choices":["left","center","right"]}]}},{"id":1,"name":"list2","data":{"file":"yahoo","items":[{"jimbo":"ddf","rats":false}]}}],"outputs":[{"id":0,"name":"jsextension.js","data":"out"}]}