{"fileData":[{"jsonIndex":"7","boilerIndex":0,"filePath":"/","name":"Jsextension.js","data":"const rgbSplitEffect = extension\n  .addEffect('RgbSplit')\n  .setFullName(_('Rgb split'))\n  .setDescription(\n    _('Add a RGB split effect also known as Chromatic abberation')\n  )\n  .addIncludeFile('Extensions/Effects/pixi-filters/filter-rgb-split.js')\n  .addIncludeFile('Extensions/Effects/rgb-split-pixi-filter.js')\nconst rgbSplitProperties = rgbSplitEffect.getProperties()\nrgbSplitProperties.set(\n  'redX',\n  new gd.PropertyDescriptor(/* defaultValue= */ '-10')\n    .setLabel(_('Red X (between -20 and 20)'))\n    .setType('number')\n)\nrgbSplitProperties.set(\n  'redY',\n  new gd.PropertyDescriptor(/* defaultValue= */ '1')\n    .setLabel(_('Red Y (between -20 and 20)'))\n    .setType('number')\n)\nrgbSplitProperties.set(\n  'greenX',\n  new gd.PropertyDescriptor(/* defaultValue= */ '0')\n    .setLabel(_('Green X (between -20 and 20)'))\n    .setType('number')\n)\nrgbSplitProperties.set(\n  'greenY',\n  new gd.PropertyDescriptor(/* defaultValue= */ '0')\n    .setLabel(_('Green Y (between -20 and 20)'))\n    .setType('number')\n)\nrgbSplitProperties.set(\n  'blueX',\n  new gd.PropertyDescriptor(/* defaultValue= */ '0')\n    .setLabel(_('Blue X (between -20 and 20)'))\n    .setType('number')\n)\nrgbSplitProperties.set(\n  'blueY',\n  new gd.PropertyDescriptor(/* defaultValue= */ '10')\n    .setLabel(_('Blue Y (between -20 and 20)'))\n    .setType('number')\n)\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/Jsextension.js"},{"jsonIndex":0,"boilerIndex":1,"filePath":"/","name":"crt-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('Crt', {\n  makePIXIFilter: function(layer, effectData) {\n    var crtFilter = new PIXI.filters.CRTFilter()\n\n    return crtFilter\n  },\n  update: function(filter, layer) {\n    if (filter.animated) {\n      filter.time += layer.getElapsedTime() / 1000;\n      filter.seed = Math.random();\n    }\n  },\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'lineWidth') {\n      filter.lineWidth = value\n    } else if (parameterName === 'lineContrast') {\n      filter.lineContrast = value\n    } else if (parameterName === 'noise') {\n      filter.noise = value\n    } else if (parameterName === 'curvature') {\n      filter.curvature = value\n    } else if (parameterName === 'noiseSize') {\n      filter.noiseSize = value\n    } else if (parameterName === 'vignetting') {\n      filter.vignetting = value\n    } else if (parameterName === 'vignettingAlpha') {\n      filter.vignettingAlpha = value\n    } else if (parameterName === 'vignettingBlur') {\n      filter.vignettingBlur = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {},\n  updateBooleanParameter: function(filter, parameterName, value) {\n    if (parameterName === 'verticalLine') {\n      filter.verticalLine = value\n    }\n    if (parameterName === 'animated') {\n      filter.animated = value\n    }\n  },\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/crt-pixi-filter.js"},{"jsonIndex":2,"boilerIndex":1,"filePath":"/","name":"godray-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('Godray', {\n  makePIXIFilter: function(layer, effectData) {\n    var godrayFilter = new PIXI.filters.GodrayFilter();\n\n    return godrayFilter;\n  },\n  update: function(filter, layer) {\n     if (filter.animated) {\n      filter.time += layer.getElapsedTime() / 1000;\n    }\n  },\n  updateDoubleParameter: function(filter, parameterName, value) {\n    else if (parameterName === 'lacunarity') {\n      filter.lacunarity = value;\n    }\n    else if (parameterName === 'angle') {\n      filter.angle = value;\n    }\n    else if (parameterName === 'gain') {\n      filter.gain = value;\n    }\n    else if (parameterName === 'light') {\n      filter.light = value;\n    }\n    else if (parameterName === 'x') {\n      filter.x = value;\n    }\n    else if (parameterName === 'y') {\n      filter.y = value;\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {\n  },\n  updateBooleanParameter: function(filter, parameterName, value) {\n    if (parameterName === 'parallel') {\n      filter.parallel = value;\n    }\n    if (parameterName === 'animated') {\n      filter.animated = value;\n    }\n  },\n});\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/godray-pixi-filter.js"},{"jsonIndex":3,"boilerIndex":1,"filePath":"/","name":"tilt-shift-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('TiltShift', {\n  makePIXIFilter: function(layer, effectData) {\n    var tiltShiftFilter = new PIXI.filters.TiltShiftFilter()\n\n    return tiltShiftFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'blur') {\n      filter.blur = value\n    } else if (parameterName === 'gradientBlur') {\n      filter.gradientBlur = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {},\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/tilt-shift-pixi-filter.js"},{"jsonIndex":4,"boilerIndex":1,"filePath":"/","name":"advanced-bloom-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('AdvancedBloom', {\n  makePIXIFilter: function(layer, effectData) {\n    var advancedBloomFilter = new PIXI.filters.AdvancedBloomFilter()\n\n    return advancedBloomFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'threshold') {\n      filter.threshold = value\n    } else if (parameterName === 'bloomScale') {\n      filter.bloomScale = value\n    } else if (parameterName === 'brightness') {\n      filter.brightness = value\n    } else if (parameterName === 'blur') {\n      filter.blur = value\n    } else if (parameterName === 'quality') {\n      filter.quality = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {},\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/advanced-bloom-pixi-filter.js"},{"jsonIndex":5,"boilerIndex":1,"filePath":"/","name":"kawase-blur-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('KawaseBlur', {\n  makePIXIFilter: function(layer, effectData) {\n    var kawaseBlurFilter = new PIXI.filters.KawaseBlurFilter()\n\n    return kawaseBlurFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'pixelizeX') {\n      filter.pixelizeX = value\n    } else if (parameterName === 'pixelizeY') {\n      filter.pixelizeY = value\n    } else if (parameterName === 'blur') {\n      filter.blur = value\n    } else if (parameterName === 'quality') {\n      filter.quality = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {},\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/kawase-blur-pixi-filter.js"},{"jsonIndex":6,"boilerIndex":1,"filePath":"/","name":"zoom-blur-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('ZoomBlur', {\n  makePIXIFilter: function(layer, effectData) {\n    var zoomBlurFilter = new PIXI.filters.ZoomBlurFilter()\n\n    return zoomBlurFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'centerX') {\n      filter.center[0]= Math.round(window.innerWidth * value);\n    }\n    else if (parameterName === 'centerY') {\n      filter.center[1] = Math.round(window.innerHeight * value);\n    }\n    else if (parameterName === 'innerRadius') {\n      filter.innerRadius = Math.round(window.innerWidth * value);\n    }\n    else if (parameterName === 'strength') {\n      filter.strength = gdjs.PixiFiltersTools.clampValue(value / 10, 0, 20);\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {},\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/zoom-blur-pixi-filter.js"},{"jsonIndex":7,"boilerIndex":1,"filePath":"/","name":"rgb-split-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('RgbSplit', {\n  makePIXIFilter: function(layer, effectData) {\n    var rgbSplitFilter = new PIXI.filters.RGBSplitFilter()\n\n    return rgbSplitFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'redX') {\n      filter.red.x = value;\n    } else if (parameterName === 'redY') {\n      filter.red.y = value;\n    } else if (parameterName === 'greenX') {\n      filter.green.x = value;\n    } else if (parameterName === 'greenY') {\n      filter.green.y = value;\n    } else if (parameterName === 'blueX') {\n      filter.blue.x = value;\n    } else if (parameterName === 'blueY') {\n      filter.blue.y = value;\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {},\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/rgb-split-pixi-filter.js"},{"jsonIndex":8,"boilerIndex":1,"filePath":"/","name":"adjustment-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('Adjustment', {\n  makePIXIFilter: function(layer, effectData) {\n    var adjustmentFilter = new PIXI.filters.AdjustmentFilter()\n\n    return adjustmentFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'gamma') {\n      filter.gamma = value\n    } else if (parameterName === 'saturation') {\n      filter.saturation = value\n    } else if (parameterName === 'contrast') {\n      filter.contrast = value\n    } else if (parameterName === 'brightness') {\n      filter.brightness = value\n    } else if (parameterName === 'red') {\n      filter.red = value\n    } else if (parameterName === 'green') {\n      filter.green = value\n    } else if (parameterName === 'blue') {\n      filter.blue = value\n    } else if (parameterName === 'alpha') {\n      filter.alpha = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {},\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/adjustment-pixi-filter.js"},{"jsonIndex":9,"boilerIndex":1,"filePath":"/","name":"drop-shadow-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('DropShadow', {\n  makePIXIFilter: function(layer, effectData) {\n    var dropShadowFilter = new PIXI.filters.DropShadowFilter()\n\n    return dropShadowFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'blur') {\n      filter.blur = value\n    } else if (parameterName === 'quality') {\n      filter.quality = value\n    } else if (parameterName === 'alpha') {\n      filter.alpha = value\n    } else if (parameterName === 'distance') {\n      filter.distance = value\n    } else if (parameterName === 'rotation') {\n      filter.rotation = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {\n    if (parameterName === 'color') {\n      filter.color = value.replace('#', '0x')\n    }\n  },\n  updateBooleanParameter: function(filter, parameterName, value) {\n    if (parameterName === 'shadowOnly') {\n      filter.shadowOnly = value\n    }\n  },\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/drop-shadow-pixi-filter.js"},{"jsonIndex":10,"boilerIndex":1,"filePath":"/","name":"outline-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('Outline', {\n  makePIXIFilter: function(layer, effectData) {\n    var outlineFilter = new PIXI.filters.OutlineFilter()\n\n    return outlineFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'thickness') {\n      filter.thickness = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {\n    if (parameterName === 'color') {\n      filter.color = value.replace('#', '0x')\n    }\n  },\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/outline-pixi-filter.js"},{"jsonIndex":11,"boilerIndex":1,"filePath":"/","name":"glow-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('Glow', {\n  makePIXIFilter: function(layer, effectData) {\n    var glowFilter = new PIXI.filters.GlowFilter()\n\n    return glowFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'innerStrength') {\n      filter.innerStrength = value\n    } else if (parameterName === 'outerStrength') {\n      filter.outerStrength = value\n    } else if (parameterName === 'distance') {\n      filter.distance = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {\n    if (parameterName === 'color') {\n      filter.color = value.replace('#', '0x')\n    }\n  },\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/glow-pixi-filter.js"},{"jsonIndex":12,"boilerIndex":1,"filePath":"/","name":"ascii-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('Ascii', {\n  makePIXIFilter: function(layer, effectData) {\n    var asciiFilter = new PIXI.filters.AsciiFilter()\n\n    return asciiFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'size') {\n      filter.size = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {},\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":false,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/ascii-pixi-filter.js"},{"jsonIndex":13,"boilerIndex":1,"filePath":"/","name":"bevel-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('Bevel', {\n  makePIXIFilter: function(layer, effectData) {\n    var bevelFilter = new PIXI.filters.BevelFilter()\n\n    return bevelFilter\n  },\n  update: function(filter, layer) {},\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'rotation') {\n      filter.rotation = value\n    } else if (parameterName === 'thickness') {\n      filter.thickness = value\n    } else if (parameterName === 'distance') {\n      filter.distance = value\n    } else if (parameterName === 'lightAlpha') {\n      filter.lightAlpha = value\n    } else if (parameterName === 'shadowAlpha') {\n      filter.shadowAlpha = value\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {\n    if (parameterName === 'lightColor') {\n      filter.lightColor = value.replace('#', '0x')\n    }\n    if (parameterName === 'shadowColor') {\n      filter.shadowColor = value.replace('#', '0x')\n    }\n  },\n  updateBooleanParameter: function(filter, parameterName, value) {},\n})\n","enabled":true,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/bevel-pixi-filter.js"},{"jsonIndex":14,"boilerIndex":1,"filePath":"/","name":"multi-color-replace-pixi-filter.js","data":"gdjs.PixiFiltersTools.registerFilterCreator('MultiColorReplace', {\n  makePIXIFilter: function(layer, effectData) {\n    var multiColorReplaceFilter = new PIXI.filters.MultiColorReplaceFilter();\n\n    return multiColorReplaceFilter;\n  },\n  update: function(filter, layer) {\n  },\n  updateDoubleParameter: function(filter, parameterName, value) {\n    if (parameterName === 'epsilon') {\n      filter.epsilon = value;\n    }\n  },\n  updateStringParameter: function(filter, parameterName, value) {\n    if (parameterName === 'original 0') {\n      filter.original 0 = value.replace('#', '0x');\n    }\n    if (parameterName === 'target 0') {\n      filter.target 0 = value.replace('#', '0x');\n    }\n    if (parameterName === 'original 1') {\n      filter.original 1 = value.replace('#', '0x');\n    }\n    if (parameterName === 'target 1') {\n      filter.target 1 = value.replace('#', '0x');\n    }\n    if (parameterName === 'original 2') {\n      filter.original 2 = value.replace('#', '0x');\n    }\n    if (parameterName === 'target 2') {\n      filter.target 2 = value.replace('#', '0x');\n    }\n  },\n  updateBooleanParameter: function(filter, parameterName, value) {\n  },\n});\n","enabled":true,"generatedPath":"/home/fox/DEV/slowCooker/public/examples/multi-color-replace-pixi-filter.js"}],"codeData":[{"id":0,"name":"jsExtension","data":"const {{camelcase filterName}}Effect = extension\n      .addEffect('{{pascalcase filterName}}')\n      .setFullName(_('{{capitalize filterName}}'))\n      .setDescription(_('{{description}}'))\n      .addIncludeFile('Extensions/Effects/pixi-filters/filter-{{dashcase filterName}}.js')\n      .addIncludeFile('Extensions/Effects/{{dashcase filterName}}-pixi-filter.js');\nconst {{camelcase filterName}}Properties = {{camelcase filterName}}Effect.getProperties();\n{{#each params}}\n {{camelcase ../filterName}}Properties.set(\n  '{{@key}}',\n  new gd.PropertyDescriptor(/* defaultValue= */ '{{this.default}}')\n    .setLabel(_('{{this.name}} ({{this.description}})'))\n    .setType('{{#if this.boolean}}boolean{{else if this.color}}color{{else}}number{{/if}}')\n);\n{{/each}}"},{"id":1,"name":"filter","data":"gdjs.PixiFiltersTools.registerFilterCreator('{{pascalcase filterName}}', {\n  makePIXIFilter: function(layer, effectData) {\n    var {{camelcase filterName}}Filter = new PIXI.filters.{{className}}Filter();\n\n    return {{camelcase filterName}}Filter;\n  },\n  update: function(filter, layer) {\n    {{#with params.animated}}\n     if (filter.animated) {\n      filter.time += layer.getElapsedTime() / 1000;\n    }\n    {{/with}}\n  },\n  updateDoubleParameter: function(filter, parameterName, value) {\n    {{#each params}}\n    {{#unless this.boolean}}\n    {{#unless this.color}}\n    {{#if @index}}else {{/if}}if (parameterName === '{{@key}}') {\n      filter.{{@key}} = value;\n    }\n    {{/unless}}\n    {{/unless}}\n    {{/each}}\n  },\n  updateStringParameter: function(filter, parameterName, value) {\n    {{#each params}}\n    {{#with this.color}}\n    if (parameterName === '{{@key}}') {\n      filter.{{@key}} = value.replace('#', '0x');\n    }\n    {{/with}}\n    {{/each}}\n  },\n  updateBooleanParameter: function(filter, parameterName, value) {\n    {{#each params}}\n    {{#with this.boolean}}\n    if (parameterName === '{{@key}}') {\n      filter.{{@key}} = value;\n    }\n    {{/with}}\n    {{/each}}\n  },\n});\n"}],"jsonData":[{"id":0,"name":"crt","data":{"description":"Add Crt effect","filterName":"crt","animated":true,"className":"CRT","params":{"lineWidth":{"name":"Line width","default":"0.2","number":true,"description":"between 0 and 5"},"lineContrast":{"name":"Line contrast","default":"0","number":true,"description":"between 0 and 1"},"noise":{"name":"Noise","default":"0.1","number":true,"description":"between 0 and 1"},"curvature":{"name":"Curvature","default":"0","number":true,"description":"between 0 and 10"},"verticalLine":{"name":"Vertical line","default":"0","boolean":true,"description":"true or false"},"noiseSize":{"name":"Noise size","default":"1","number":true,"description":"between 0 and 10"},"vignetting":{"name":"Vignetting","default":"0.3","number":true,"description":"between 0 and 1"},"vignettingAlpha":{"name":"Vignetting alpha","number":true,"default":1,"description":"between 0 and 1"},"vignettingBlur":{"name":"Vignetting blur","default":"0.3","number":true,"description":"between 0 and 1"},"animated":{"name":"Animated","boolean":"''","default":true,"description":"Enable animations"}}}},{"id":1,"name":"list2","data":{"items":[{"jimbo":"dddgff","rats":false}]}},{"id":2,"name":"godray","data":{"description":"Add Godray effect","filterName":"godray","animated":true,"className":"Godray","params":{"parallel":{"name":"Parallel","default":"true","description":"parallel rays","boolean":true},"animated":{"name":"Animated","default":"true","description":"animate rays","boolean":true},"lacunarity":{"name":"Lacunarity","default":"2.75","description":"between 0 and 5"},"angle":{"name":"Angle","default":"30","description":"between -60 and 60"},"gain":{"name":"Gain","default":"0.6","description":"between 0 and 1"},"light":{"name":"Light","default":"30","description":"between 0 and 60"},"x":{"name":"Center X","default":"100","description":"between 100 and 1000"},"y":{"name":"Center Y","default":"100","description":"between -1000 and 100"}}}},{"id":3,"name":"tilt-shift","data":{"description":"Add Tilt shift effect","filterName":"tilt shift","className":"TiltShift","params":{"blur":{"name":"Blur","default":"30","description":"between 0 and 200"},"gradientBlur":{"name":"Gradient blur","default":"1000","description":"between 0 and 2000"}}}},{"id":4,"name":"advanced-bloom","data":{"filterName":"advanced bloom","description":"Add Advanced bloom effect","className":"AdvancedBloom","params":{"threshold":{"name":"Threshold","default":"0.5","description":"between 0 and 1"},"bloomScale":{"name":"Bloom Scale","default":"0.7","description":"between 0 and 2"},"brightness":{"name":"Brightness","default":"0.7","description":"between 0 and 2"},"blur":{"name":"Blur","default":"4","description":"between 0 and 20"},"quality":{"name":"Quality","default":"7","description":"between 0 and 20"}}}},{"id":5,"name":"kawase-blur","data":{"description":"Add Kawase blur effect","filterName":"kawase blur","className":"KawaseBlur","params":{"pixelizeX":{"name":"Pixelize X","default":"1","description":"between 0 and 10"},"pixelizeY":{"name":"Pixelize Y","default":"1","description":"between 0 and 10"},"blur":{"name":"Blur","default":"0.5","description":"between 0 and 20"},"quality":{"name":"Quality","default":"3","description":"between 1 and 20"}}}},{"id":6,"name":"zoom-blur","data":{"filterName":"zoom blur","description":"Add Zoom blur effect","className":"ZoomBlur","params":{"centerX":{"name":"Center X","default":"0.5","description":"between 0 and 1, 0.5 is window middle"},"centerY":{"name":"Center Y","default":"0.5","description":"between 0 and 1, 0.5 is window middle"},"innerRadius":{"name":"Inner radius","default":"0.2","description":"between 0 and 1, 0.5 is mid-way"},"strength":{"name":"strength","default":"0.3","description":"between 0 and 5"}}}},{"id":7,"name":"rgb-split","data":{"filterName":"rgb split","description":"Add a RGB split effect also known as Chromatic abberation","className":"RGBSplit","params":{"redX":{"name":"Red X","default":"-10","description":"between -20 and 20"},"redY":{"name":"Red Y","default":"1","description":"between -20 and 20"},"greenX":{"name":"Green X","default":"0","description":"between -20 and 20"},"greenY":{"name":"Green Y","default":"0","description":"between -20 and 20"},"blueX":{"name":"Blue X","default":"0","description":"between -20 and 20"},"blueY":{"name":"Blue Y","default":"10","description":"between -20 and 20"}}}},{"id":8,"name":"adjustment","data":{"description":"Add a colour adjustment effect","filterName":"adjustment","className":"Adjustment","params":{"gamma":{"name":"Gamma","default":"1","description":"between 0 and 5"},"saturation":{"name":"Saturation","default":"2","description":"between 0 and 5"},"contrast":{"name":"Contrast","default":"1","description":"between 0 and 5"},"brightness":{"name":"Brightness","default":"1","description":"between 0 and 5"},"red":{"name":"Red","default":"1","description":"between 0 and 5"},"green":{"name":"Green","default":"1","description":"between 0 and 5"},"blue":{"name":"Blue","default":"0.6","description":"between 0 and 5"},"alpha":{"name":"Alpha","default":"1","description":"between 0 and 1, 0 is transparent"}}}},{"id":9,"name":"drop-shadow","data":{"filterName":"drop shadow","description":"Add Dropshadow effect","className":"DropShadow","params":{"blur":{"name":"Blur","default":"2","description":"between 0 and 20"},"quality":{"name":"Quality","default":"2","description":"between 0 and 20"},"alpha":{"name":"Alpha","default":"2","description":"between 0 and 1"},"distance":{"name":"Distance","default":"2","description":"between 0 and 1"},"rotation":{"name":"Rotation","default":"2","description":"between 0 and 360"},"color":{"name":"Color","default":"1","color":true,"description":"color of the outline"},"shadowOnly":{"name":"Shadow only","default":"1","boolean":true,"description":"show only shadow"}}}},{"id":10,"name":"outline","data":{"description":"Add Outline effect","filterName":"outline","className":"Outline","params":{"thickness":{"name":"Thickness","default":"2","description":"between 0 and 20"},"color":{"name":"Color","default":"1","color":true,"description":"color of the outline"}}}},{"id":11,"name":"glow","data":{"description":"Add Glow effect","filterName":"glow","className":"Glow","params":{"innerStrength":{"name":"Inner strength","default":"1","description":"between 0 and 20"},"outerStrength":{"name":"Outer strength","default":"2","description":"between 0 and 20"},"distance":{"name":"Distance","default":"15","description":"between 10 and 20"},"color":{"name":"Color","default":"#ffffff","color":true,"description":"color of the outline"}}}},{"id":12,"name":"ascii","data":{"description":"Add Ascii effect","filterName":"ascii","className":"Ascii","params":{"size":{"name":"Size","default":"8","description":"between 2 and 20"}}}},{"id":13,"name":"bevel","data":{"description":"Add Bevel effect","filterName":"bevel","className":"Bevel","params":{"rotation":{"name":"Rotation","default":"1","description":"between 0 and 360"},"thickness":{"name":"Outer strength","default":"2","description":"between 0 and 5"},"distance":{"name":"Distance","default":"15","description":"between 10 and 20"},"lightAlpha":{"name":"Light alpha","default":"1","description":"between 0 and 1"},"lightColor":{"name":"Light color","default":"#ffffff","color":true,"description":"color of the outline"},"shadowColor":{"name":"Shadow color","default":"#000000ff","color":true,"description":"color of the outline"},"shadowAlpha":{"name":"Shadow alpha","default":"1","description":"between 0 and 1"}}}},{"id":14,"name":"multi-color-replace","data":{"description":"Add Color replace effect","filterName":"multi color replace","className":"MultiColorReplace","params":{"original 0":{"name":"Original 0 color","default":"#000000","color":true,"description":"set color"},"target 0":{"name":"Target 0 color","default":"#dc8f8fff","color":true,"description":"set color"},"original 1":{"name":"Original 1 color","default":"#000000","color":true,"description":"set color"},"target 1":{"name":"Target 1 color","default":"#dc8f8fff","color":true,"description":"set color"},"original 2":{"name":"Original 2 color","default":"#000000","color":true,"description":"set color"},"target 2":{"name":"Target 2 color","default":"#dc8f8fff","color":true,"description":"set color"},"epsilon":{"name":"Epsilon","default":"0.2","description":"between 0 and 1"}}}}],"outputs":[{"id":0,"name":"jsextension.js","data":"out"}]}